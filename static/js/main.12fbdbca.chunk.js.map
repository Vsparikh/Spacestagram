{"version":3,"sources":["Loading.js","DataCard.js","CardGrid.js","Header.js","DatePickers.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","Loading","width","height","top","left","marginLeft","spacing","LoadingScreen","classes","Grid","container","justifyContent","alignItems","direction","style","minHeight","item","xs","Typography","variant","color","align","className","CircularProgress","title","flexGrow","card","maxWidth","marginTop","marginRight","media","paddingTop","maxHeight","DataCard","cardData","console","log","imgSrc","hdurl","url","useReducer","like","toggleLike","Card","CardHeader","subheader","date","CardMedia","image","CardContent","component","explanation","IconButton","onClick","red","grey","CardGrid","data","List","map","ListItem","Header","AppBar","position","Toolbar","DatePickers","startDate","onStartDateChange","endDate","onEndDateChange","utils","DateFnsUtils","margin","id","label","format","value","disableFuture","onChange","KeyboardButtonProps","shouldDisableDate","App","useState","setData","loading","setLoading","error","setError","Date","setStartDate","setEndDate","useEffect","fetch","toISOString","slice","then","response","json","catch","on","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAKMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,QAAS,CACPC,MAAO,OACPC,OAAQ,OACRC,IAAK,MACLC,KAAM,MACN,YAAa,CACXC,WAAYN,EAAMO,QAAQ,SAKnBC,EAAgB,WAC3B,IAAMC,EAAUX,IAEhB,OACE,eAACY,EAAA,EAAD,CACEC,WAAS,EACTC,eAAe,SACfC,WAAW,SACXC,UAAU,SACVC,MAAO,CAAEC,UAAW,SALtB,UAQA,cAACN,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUC,MAAM,SAA/C,uBAIF,cAACZ,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,SACE,sBAAKK,UAAWd,EAAQR,QAAxB,UACE,cAACuB,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,CAAkBH,MAAM,cACxB,cAACG,EAAA,EAAD,a,8ECzBJ1B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyB,MAAO,CACLC,SAAU,GAEZC,KAAM,CACJC,SAAU,IACVC,UAAW,GACXvB,WAAY,OACZwB,YAAa,QAEfC,MAAO,CACL5B,OAAQ,EACR6B,WAAY,SACZC,UAAW,YAIFC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB1B,EAAUX,IAChBsC,QAAQC,IAAIF,GACZ,IAAMG,EAASH,EAASI,MAAQJ,EAASI,MAAQJ,EAASK,IAC1D,EAA2BC,sBAAW,SAACC,GAAD,OAAWA,KAAM,GAAvD,mBAAOA,EAAP,KAAaC,EAAb,KAEA,OACE,eAACC,EAAA,EAAD,CAAMrB,UAAWd,EAAQkB,KAAzB,UACE,cAACkB,EAAA,EAAD,CAAYpB,MAAOU,EAASV,MAAOqB,UAAWX,EAASY,OACvD,cAACC,EAAA,EAAD,CAAWzB,UAAWd,EAAQsB,MAAOkB,MAAOX,IAC5C,cAACY,EAAA,EAAD,UACE,cAAC/B,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgB8B,UAAU,IAA5D,SACGhB,EAASiB,gBAGd,cAACC,EAAA,EAAD,CAAY,aAAW,oBAAoBC,QAASX,EAApD,SACE,cAAC,IAAD,CAAc5B,MAAO,CAAEM,MAAOqB,EAAOa,IAAI,KAAOC,IAAK,c,kBCxChDC,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,cAACC,EAAA,EAAD,UACGD,EAAKE,KAAI,SAACzB,GAAD,OACR,cAAC0B,EAAA,EAAD,UACE,cAAC,EAAD,CAAU1B,SAAUA,KADPA,EAASY,Y,kBCR1BjD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyB,MAAO,CACLC,SAAU,OAIDoC,EAAS,WACpB,IAAMrD,EAAUX,IAChB,OACE,cAACiE,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAAC9C,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUE,UAAWd,EAAQgB,MAA5D,0BAGA,cAACN,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UAAtC,iF,yBCRK6C,EAAc,SAAC,GAKrB,IAJLC,EAII,EAJJA,UACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,QACAC,EACI,EADJA,gBAMA,OACE,eAAC,IAAD,CAAyBC,MAAOC,IAAhC,UACE,cAAC9D,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,eAA/B,SACE,cAAC,IAAD,CACE6D,OAAO,SACPC,GAAG,oBACHC,MAAM,cACNC,OAAO,aACPC,MAAOV,EACPW,cAAc,OACdC,SAAUX,EACVY,oBAAqB,CACnB,aAAc,yBAKpB,cAACtE,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,eAA/B,SACE,cAAC,IAAD,CACE6D,OAAO,SACPC,GAAG,kBACHC,MAAM,YACNC,OAAO,aACPC,MAAOR,EACPU,SAAUT,EACVQ,cAAc,OACdG,kBA9Be,SAAClC,GACtB,OAAOA,GAAQoB,GA8BTa,oBAAqB,CACnB,aAAc,2BCYXE,MApDf,WAEE,MAAwBC,mBAAS,MAAjC,mBAAOzB,EAAP,KAAa0B,EAAb,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEA,EAAkCL,mBAAS,IAAIM,MAA/C,mBAAOtB,EAAP,KAAkBuB,EAAlB,KACA,EAA8BP,mBAAS,IAAIM,MAA3C,mBAAOpB,EAAP,KAAgBsB,EAAhB,KAoBA,OAbAC,qBAAU,WACRN,GAAW,GACXO,MAAM,mGAAD,OACgG1B,EAChG2B,cACAC,MAAM,EAAG,IAHT,qBAGyB1B,EAAQyB,cAAcC,MAAM,EAAG,MAE1DC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,KAAKZ,GACLY,MAAK,kBAAMV,GAAW,MACtBa,MAAMX,KACR,CAACrB,EAAWE,IAGb,qCACE,cAAC,EAAD,IAEA,cAAC,EAAD,CACEF,UAAWA,EACXE,QAASA,EACTD,kBA1BwB,SAACrB,GAC7B2C,EAAa3C,IA0BTqD,IAAE,EACF9B,gBAzBsB,SAACvB,GAC3B4C,EAAW5C,MA2BRsC,EACC,cAAC,EAAD,IACEE,EACF,8BAAMc,KAAKC,UAAUf,EAAO,KAAM,KAChC7B,EACF,cAAC,EAAD,CAAUA,KAAMA,IAEhB,oEC/CR6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.12fbdbca.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { Grid } from \"@material-ui/core\";\nimport { Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  Loading: {\n    width: \"100%\",\n    height: \"100%\",\n    top: \"50%\",\n    left: \"50%\",\n    \"& > * + *\": {\n      marginLeft: theme.spacing(3),\n    },\n  },\n}));\n\nexport const LoadingScreen = () => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      direction=\"column\"\n      style={{ minHeight: \"100vh\" }}\n    >\n    \n    <Grid item xs={6}>\n        <Typography variant=\"h1\" color=\"primary\" align=\"center\">\n          Loading\n        </Typography>\n    </Grid>\n      <Grid item xs={3}>\n        <div className={classes.Loading}>\n          <CircularProgress />\n          <CircularProgress color=\"secondary\" />\n          <CircularProgress />\n        </div>\n      </Grid>\n      \n    </Grid>\n  );\n};\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardMedia,\n  Typography,\n  makeStyles,\n  IconButton,\n} from \"@material-ui/core\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport { useReducer } from \"react\";\nimport { grey, red } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n  card: {\n    maxWidth: 600,\n    marginTop: 20,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n    maxHeight: \"50vh\",\n  },\n}));\n\nexport const DataCard = ({ cardData }) => {\n  const classes = useStyles();\n  console.log(cardData)\n  const imgSrc = cardData.hdurl ? cardData.hdurl : cardData.url;\n  const [like, toggleLike] = useReducer((like) => !like, false);\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader title={cardData.title} subheader={cardData.date} />\n      <CardMedia className={classes.media} image={imgSrc} />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {cardData.explanation}\n        </Typography>\n      </CardContent>\n      <IconButton aria-label=\"like this content\" onClick={toggleLike}>\n        <FavoriteIcon style={{ color: like ? red[900] : grey[900] }} />\n      </IconButton>\n    </Card>\n  );\n};\n","import { DataCard } from \"./DataCard\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\n// import { makeStyles } from '@material-ui/core/styles';\n// import Grid from '@material-ui/core/Grid';\n\nexport const CardGrid = ({ data }) => {\n  return (\n    <List>\n      {data.map((cardData) => (\n        <ListItem key={cardData.date}>\n          <DataCard cardData={cardData} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import { AppBar, Typography, makeStyles, Toolbar } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport const Header = () => {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h5\" color=\"inherit\" className={classes.title}>\n          Spacestagram\n        </Typography>\n        <Typography variant=\"subtitle2\" color=\"inherit\">\n          Brought to you by NASA's Astronomy Photo of the Day(APOD) API\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import \"date-fns\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nexport const DatePickers = ({\n  startDate,\n  onStartDateChange,\n  endDate,\n  onEndDateChange,\n}) => {\n  const IsValidEndDate = (date) => {\n    return date <= startDate;\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Grid container justifyContent=\"space-around\">\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"start-date-picker\"\n          label=\"Start Date \"\n          format=\"MM/dd/yyyy\"\n          value={startDate}\n          disableFuture=\"true\"\n          onChange={onStartDateChange}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change start date\",\n          }}\n        />\n      </Grid>\n\n      <Grid container justifyContent=\"space-around\">\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"end-date-picker\"\n          label=\"End Date \"\n          format=\"MM/dd/yyyy\"\n          value={endDate}\n          onChange={onEndDateChange}\n          disableFuture=\"true\"\n          shouldDisableDate={IsValidEndDate}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change end date\",\n          }}\n        />\n      </Grid>\n    </MuiPickersUtilsProvider>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { LoadingScreen } from \"./Loading\";\nimport { CardGrid } from \"./CardGrid\";\nimport { Header } from \"./Header\";\nimport { DatePickers } from \"./DatePickers\";\n\nfunction App() {\n  // used for API requests\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n  const handleStartDateChange = (date) => {\n    setStartDate(date);\n  };\n  const handleEndDateChange = (date) => {\n    setEndDate(date);\n  };\n  useEffect(() => {\n    setLoading(true);\n    fetch(\n      `https://api.nasa.gov/planetary/apod?api_key=sPjwtonfszbaCuXD47EWYC8XGBUmn1oj2s6Y6y6d&start_date=${startDate\n        .toISOString()\n        .slice(0, 10)}&end_date=${endDate.toISOString().slice(0, 10)}`\n    )\n      .then((response) => response.json())\n      .then(setData)\n      .then(() => setLoading(false))\n      .catch(setError);\n  }, [startDate, endDate]);\n\n  return (\n    <>\n      <Header />\n\n      <DatePickers\n        startDate={startDate}\n        endDate={endDate}\n        onStartDateChange={handleStartDateChange}\n        on\n        onEndDateChange={handleEndDateChange}\n      />\n\n      {loading ? (\n        <LoadingScreen />\n      ) : error ? (\n        <pre>{JSON.stringify(error, null, 2)}</pre>\n      ) : data ? (\n        <CardGrid data={data} />\n      ) : (\n        <p>ERROR: NO DATA RETURED FROM API</p>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}